benefitAddress=Revenue account
CancelProposalTemplate=String;must;verifier;Submit verifier\n\
String;must;piPid;PIPID\n\
BigInteger;must;endVotingRound;Number of voting consensus rounds. Refer to the description of submitting an upgrade proposal. At the same time, the value of this parameter in this interface cannot be greater than the corresponding number of voting consensus rounds\n\
String;must;canceledProposalId;Proposal ID to be cancelled
CreateRestrictingPlanSubmodule=String;true;account;Indicates  released address for restricting plan\n\
Array;true;plans;Indicates restricting plan list(array)
DeclareVersionSubmodule=Strin;true;activeNode;Declared nodeId, only verifier or candidate. If null, it will use the nodeId configured in node_config
DelegateNewSubmodule=Integer;must;type;Enumeration, 0 means use the free amount of the account, 1 means use the amount of the lock , 2 means used automatic allocation to make a pledge\n\
String;optional;nodeId;Node id, hexadecimal format, starting with 0x\n\
BigDecimal;must;amount;Amount commissioned(based on the smallest unit, 1LAT = 10**18 VON)
GetDelegateRewardSubmodule=String;must;address;Check the address of your account\n\
List<String>;must;nodeIds;Node list, it will check all nodes if empty\

GetGovernParamValueSubmodule=String;must;module;Module name, can be retrieved from government_listGovernParam command\n\
String;must;name;Param name, can be retrieved from government_listGovernParam command
head=Type;Required;ParamName;Description
paramDescription=ParamDescription
paramName=ParamName
ParamProposalTemplate=String;must;verifier;Submit verifier\n\
String;must;piPid;PIPID\n\
String;must;module;Parameter module\n\
String;must;name;Parameter name\n\
String;must;newValue;Parameter new value\n
plans=BigInteger;true;epoch;Indicates a multiple of the settlement cycle\n\
BigDecimal;true;amount;Indicates the amount to be released on the target block. Unit: KPVON
ReportDoubleSignSubmodule=BigInteger;must;type;Multi-sign type, such as PREPARE_BLOCK, PREPARE_VOTE, VIEW_CHANGE\n\
String;must;data;A single json proof. The format refers to RPC interface Evidences
Required=Required
StakingCreateSubmodule=BigInteger;must;type;Enumeration, 0(FREE_AMOUNT_TYPE) means use the free amount of the account, 1(RESTRICTING_AMOUNT_TYPE) means use the amount of the lock, 2(AUTO_AMOUNT_TYPE) means use automatic allocation to make a pledge\n\
String;must;benefitAddress;Revenue account\n\
String;optional;nodeId;Node id, hexadecimal format\n\
String;optional;externalId;External Id(the length of the Id described by the third-party pull node), currently the keybase account public key\n\
String;optional;nodeName;The name of the node being pledged\n\
String;optional;website;The third-party homepage of the webSite node(the length is limited, indicating the homepage of the node)\n\
String;optional;details;The description of the details node(there is a length limitation, indicating the description of the node)\n\
BigDecimal;must;amount;Amount of von pledged. Unit: hrp value such as atp, lat\n\
BigInteger;must;delegateRewardPer;Delegate reward percent\uFF0C1=0.01% 10000=100%
StakingIncreaseSubmodule=BigInteger;must;type;Enumeration, 0(FREE_AMOUNT_TYPE) means use the free amount of the account, 1(RESTRICTING_AMOUNT_TYPE) means use the amount of the lock, 2(AUTO_AMOUNT_TYPE) means use automatic allocation to make a pledge\n\
String;optional;nodeId;Node id, hexadecimal format\n\
BigDecimal;must;amount;Amount of von pledged. Unit: hrp value such as atp, lat
StakingUpdateSubmodule=String;must;benefitAddress;Revenue account\n\
String;optional;nodeId;Node id, hexadecimal format\n\
String;optional;externalId;External Id(the length of the Id described by the third-party pull node), currently the keybase account public key\n\
String;optional;nodeName;The name of the node being pledged\n\
String;optional;website;The third-party homepage of the webSite node(the length is limited, indicating the homepage of the node)\n\
String;optional;details;The description of the details node(there is a length limitation, indicating the description of the node)\n\
BigInteger;must;delegateRewardPer;Delegate reward percent\uFF0C1=0.01% 10000=100%
TextProposalTemplate=String;must;verifier;Submit verifier\n\
String;must;piPid;PIPID
TransferSubmodule=String;must;from;Sender address\n\
List<String>;must;to;Receiver address\n\
BigDecimal;must;value;Transfer amount, unit: hrp such as lat or atp\n\
String;optional;data;Transfer data(useless)\n\
BigInteger;optional;gasPrice;Gas price\n\
BigInteger;optional;gasLimit;Gas limit
type=Enumeration, 1 means use the free amount of the account, 2 means use the amount of the lock to make a pledge
Type=Type
UnDelegateSubmodule=BigInteger;must;stakingBlockNum;The stakingBlockNum entrusted node has a high pledge block, which represents a unique sign of a pledge of a node\n\
String;optional;nodeId;Node id, hexadecimal format, starting with 0x\n\
BigDecimal;must;amount;The commission amount of stakingAmount reduction(based on the hrp unit, lat or atp)
UnStakingSubmodule=String;optional;nodeId;Node id, hexadecimal format
VersionProposalTemplate=String;must;verifier;Submit verifier\n\
String;must;piPid;PIPID\n\
BigInteger;must;endVotingRound;Number of voting consensus rounds. Explanation: Suppose that the transaction that submitted the proposal is round1 when the consensus round number is packed into the block, the proposal voting deadline block is high, which is round1 + endVotingRounds, the 230th block height of the consensus round (assuming a consensus round produces block 250, ppos Unveiled 20 blocks high in advance, 250 and 20 are configurable), where 0 <endVotingRounds <= 4840 (about 2 weeks, actual discussion can be calculated based on configuration), and is an integer)\n\
BigInteger;must;newVersion;Updated version
VoteSubmodule=String;true;verifier;Node id, only verifier or candidate. If null, it will use the nodeId configured in node_config\n\
String;true;proposalId;Proposal ID, the hash of submit proposal transaction\n\
String;true;option;Voting type, YEAS in favor, NAYS against, ABSTENTIONS abstaining
